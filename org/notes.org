#+SEQ_TODO: TODO IN-PROGRESS | DONE

* Install ubuntu 14.04
* Install several softwares

      sudo add-apt-repository ppa:webupd8team/java
      sudo apt-get install python-software-properties
      sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
      sudo apt-get update
      sudo apt-get install apache2 php php-mysql php-zip php-curl composer mysql-common mysql-server phpmyadmin python-numpy python-matplotlib oracle-java8-set-default openjdk-9-jdk openjdk-9-jre netbeans shutter lazarus gimp inkscape python-setuptools python-pip python-pygame python-opengl python-dev build-essential nmap wireshark lynx tree lyx filezilla gparted unetbootin wine bind9 curl aircrack-ng reaver tmux cmus w3m sc vlc breeze-icon-theme ghc nodejs ruby sysv-rc-conf blender stellarium npm postgresql phppgadmin synaptic libapache2-mod-php cython ipython openshot php-xdebug preload vim-gtk zeal w3af gradle golang rustc pandoc postgresql-server-dev-all
      sudo apt-get install mongodb
      sudo pip install jupyter
      sudo pip install --upgrade cython
      sudo pip install --upgrade scikit-learn
      sudo pip install --upgrade simpy
      sudo pip install --upgrade sympy
      sudo pip install --upgrade kivy
      sudo ln -s "$(which nodejs)" /usr/bin/node
      sudo npm install -g ionic
      sudo npm install -g cordova
      sudo npm install -g typescript
      sudo npm install -g sqlite
      sudo add-apt-repository ppa:obsproject/obs-studio
      sudo apt-get update && sudo apt-get install obs-studio

* Better autostart visibility

      cd /etc/xdg/autostart/
      sudo sed --in-place 's/NoDisplay=true/NoDisplay=false/g' *.desktop

* Add wildcard to local domain (localtest.me)
** Add zone

      sudo nano /etc/bind/named.conf.local, add this:
          zone "localtest.me" {
              type master;
              file "/etc/bind/db.localtest.me.db";
          };

** Add db

      sudo nano /etc/bind/db.localtest.me.db, add this:
          $TTL            14400
          @               IN      SOA     ns1.localtest.me.                       host.localtest.me. (
                                          201006601                               ; Serial
                                          7200                                    ; Refresh
                                          120                                     ; Retry
                                          2419200                                 ; Expire
                                          604800)                                 ; Default TTL
          ;
          localtest.me.   IN      NS      ns1.localtest.me.
          localtest.me.   IN      NS      ns2.localtest.me.

          localtest.me.   IN      MX      10 mail.localtest.me.
          localtest.me.   IN      A       127.0.0.1

          ns1             IN      A       127.0.0.1
          ns2             IN      A       127.0.0.1
          www             IN      CNAME   localtest.me.
          *               IN      CNAME   localtest.me.
          mail            IN      A       127.0.0.1
          ftp             IN      CNAME   localtest.me.
          localtest.me.   IN      TXT     "v=spf1 ip4:127.0.0.1 a mx ~all"
          mail            IN      TXT     "v=spf1 a -all"

** Add localhost as primary NS

      sudo nano /etc/resolv.conf, modify to this:
          # Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
          #     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
          nameserver 127.0.0.1
          nameserver 127.0.1.1

** To make previous changes permanent, go to /etc/resolvconf/resolv.conf.d/base, write nameserver there, and restart
** Restart bind && check the status

      sudo /etc/init.d/bind9 restart && sudo /etc/init.d/bind9 status

** Wild subdomain

      * point to @

** Add sites-available

    sudo nano /etc/apache2/sites-enabled, create localtest.me.conf (copy from existing) modify this:
        ServerAdmin webmaster@localtest.me
        ServerName localtest.me
        ServerAlias www.localtest.me # or use *.localtest.me for wild subdomain, also can add something else here e.g: puribundamalang.com
        DocumentRoot /home/gofrendi/public_html/No-CMS

** Add enable

    sudo a2ensite localtest.me
    sudo a2enmod userdir

** edit /etc/apache2/mods-enabled/php7.0.conf
** edit /etc/apache2/mods-enabled/userdir.conf add `AllowOverride All`, comment `AllowOverride FileInfo ....` and `Options Multiviews ...`
* Install nodejs (Download first)

    sudo tar --strip-components 1 -xzf /home/gofrendi/Downloads/node-v0.10.26-linux-x86.tar.gz

* Install composer

    sudo curl -sS https://getcomposer.org/installer | php
    sudo mv composer.phar /usr/local/bin/composer

* Change virtualbox resolution (for windows 8.1 guest)

    vboxmanage setextradata "windows" CustomVideoMode1 1366x768x32

* Install Haskell

    sudo apt-get install ghc alex cabal-install happy libghc-cgi-dev libghc-fgl-dev libghc-glut-dev libghc-haskell-src-dev libghc-html-dev libghc-http-dev libghc-hunit-dev libghc-mtl-dev libghc-network-dev libghc-opengl-dev libghc-parallel-dev libghc-parsec3-dev  libghc-quickcheck2-dev libghc-regex-base-dev libghc-regex-compat-dev  libghc-regex-posix-dev libghc-stm-dev libghc-syb-dev  libghc-text-dev  libghc-transformers-dev  libghc-xhtml-dev libghc-zlib-dev

* Enable dvd

    sudo /usr/share/doc/libdvdread4/install-css.sh

* Change default application

    sudo gedit /usr/share/applications/defaults.list
    sudo gedit /etc/gnome/share/defaults.list

* Newest wine

    https://www.winehq.org/download/ubuntu

* When installing windows 8 in virtual box, never forget to add guest addition and do this to make resolution better:

    VBoxManage setextradata "windows 8" CustomVideoMode1 1366x768x32

* Remove unused kernel

    dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' | xargs sudo apt-get -y purge

* postgresql & phppgadmin

    sudo apt-get install postgresql phppgadmin

    sudo nano /etc/postgresql/9.1/main/postgresql.conf

    Change “#listen_addresses = localhost” to “listen_addresses =192.168.1.8″ it allowing remote access only from specific ip address, if you want  remote access from any computers in your network set “localhost to listen_addresses =’*’ “
    uncomment #password_encryption = on to password_encryption = on

    sudo /etc/init.d/postgresql restart

    sudo -u postgres psql
    \password

    \du


    CREATE ROLE name [ [ WITH ] option [ ... ] ]

    where option can be:

          SUPERUSER | NOSUPERUSER
        | CREATEDB | NOCREATEDB
        | CREATEROLE | NOCREATEROLE
        | CREATEUSER | NOCREATEUSER
        | INHERIT | NOINHERIT
        | LOGIN | NOLOGIN
        | CONNECTION LIMIT connlimit
        | [ ENCRYPTED | UNENCRYPTED ] PASSWORD 'password'
        | VALID UNTIL 'timestamp'
        | IN ROLE rolename [, ...]
        | IN GROUP rolename [, ...]
        | ROLE rolename [, ...]
        | ADMIN rolename [, ...]
        | USER rolename [, ...]
        | SYSID uid

    sudo nano /etc/apache2/conf.d/phppgadmin

    Comment out the line:
    127.0.0.0/255.0.0.0 allow from :: 1/128
    uncomment the line:
    allow from all

    sudo service apache2 restart

    Do this if you want to connect by using bash: sudo -u postgres psql
    And this if you want to exit: \q


    1). Open -> /etc/phppgadmin -> config.inc.php

    2). change $conf['extra_login_security'] = true; to $conf['extra_login_security'] = false;

* gofrendi@minastirith:/opt/google/chrome/plugins$ sudo ln -s /usr/lib/jvm/default-java/jre/lib/i386/IcedTeaPlugin.so
* PHP

    sudo apt-get install apache2-mpm-worker
    sudo apt-get install libapache2-mod-fastcgi php5-fpm php5
    sudo a2enmod actions fastcgi alias
    sudo nano /etc/apache2/sites-available

        <IfModule mod_fastcgi.c>
                AddHandler php5-fcgi .php
                Action php5-fcgi /php5-fcgi
                Alias /php5-fcgi /usr/lib/cgi-bin/php5-fcgi
                FastCgiExternalServer /usr/lib/cgi-bin/php5-fcgi -host 127.0.0.1:9000 -pass-header Authorization
        </IfModule>

* Copy to multiple directory

    echo ./site-*/config.php | xargs -n 1 cp ./main/config.php

* zip

    zip -r folder file

* use fastcgi & mpm_event

    sudo apt-get install apache2 apache2-utils --yes;
    sudo apt-get install libapache2-mod-fastcgi --yes;
    sudo a2enmod mpm_event actions fastcgi;

    sudo apt-get install mysql-server --yes;
    sudo mysql_install_db && sudo mysql_secure_installation;
    # Say `y` (yes) to all questions asked by MySQL (recommended).

    sudo apt-get install php5-cli php5-fpm php5-dev --yes;

    # Additional PHP Extensions needed by many web apps.

    sudo apt-get install php5-curl --yes;
    sudo apt-get install php5-gd --yes;
    sudo apt-get install php5-imagick --yes;
    sudo apt-get install php5-json --yes;
    sudo apt-get install php5-mysql --yes;

    sudo apt-get install php5-mcrypt --yes;
    # This one is missing an INI file, so we add it manually.
    echo 'extension=mcrypt.so' | sudo tee -a /etc/php5/cli/conf.d/20-mcrypt.ini;
    echo 'extension=mcrypt.so' | sudo tee -a /etc/php5/fpm/conf.d/20-mcrypt.ini;

    sudo mkdir --parents /var/www/cgi-bin;

    sudo nano /etc/apache2/apache2.conf
    # add this:

        <IfModule fastcgi_module>
          # Add a new action that points to a virtual (non-existent) handler.
          # I will repeat, NON-EXISTENT. This is a virtual (non-existent) handler.
          #   i.e. `/fastcgi.php5-fpm` does not exist, that's OK :-)
          # The name of our handler is decided here. Let's call it `fastcgi-php5-fpm`.
          # See also <http://httpd.apache.org/docs/current/mod/mod_actions.html#action>

          Action fastcgi-php5-fpm /fastcgi.php5-fpm virtual

          # Now let's add an alias mapping that gives meaning to our virtual handler.
          # This forwards requests hitting our virtual (non-existent) handler;
          # sending them to FastCGI; which is yet another virtual handler.
          # I repeat, NON-EXISTENT. This is a virtual handler that does not exist.
          #   i.e. `/var/www/cgi-bin/fastcgi.php5-fpm` does not exist, that's OK :-)
          # See also <http://httpd.apache.org/docs/current/mod/mod_alias.html#alias>

          Alias /fastcgi.php5-fpm /var/www/cgi-bin/fastcgi.php5-fpm

          # Now, let's setup FastCGI so it works w/ our virtual handler and PHP5-FPM.
          # See also <http://www.fastcgi.com/mod_fastcgi/docs/mod_fastcgi.html#FastCgiExternalServer>

          FastCgiExternalServer /var/www/cgi-bin/fastcgi.php5-fpm -socket /var/run/php5-fpm.sock -idle-timeout 900 -pass-header Authorization -pass-header Range

          # Associate our handler with PHP files; including PHAR files.

          AddHandler fastcgi-php5-fpm php phar

          # Now let's configure security-related options in our CGI bin.

          <Directory /var/www/cgi-bin>
              AllowOverride none
              Options FollowSymLinks
              <IfModule authz_core_module>
              # Only when redirected internally by FastCGI.
                  Require env REDIRECT_STATUS
                  Options +ExecCGI
              </IfModule>
          </Directory>
        </IfModule>

    sudo service mysql restart;
    sudo service php5-fpm restart;
    sudo service apache2 restart;

    sudo nano /etc/php5/fpm/pool.d/z90.conf

        [www]

        chdir = /
        user = www-data
        group = www-data

        pm = dynamic

        pm.start_servers = 5
        pm.min_spare_servers = 2
        pm.max_spare_servers = 10
        pm.max_children = 50

        pm.process_idle_timeout = 10s
        pm.max_requests = 10000

        listen.mode = 0660
        listen.owner = www-data
        listen.group = www-data
        listen = /var/run/php5-fpm.sock
        listen.backlog = -1 ; Use `sysctl net.core.somaxconn`.

        security.limit_extensions =; Any, handled via Apache.

        php_admin_value[display_errors] = stderr
        catch_workers_output = yes ; Add to Apache log.

    sudo nano /etc/apache2/apache2.conf
    # Add this:
        <IfModule mpm_event_module>
          Timeout 300

          StartServers 2
          ThreadLimit 25
          ThreadsPerChild 25
          MaxConnectionsPerChild 10000

          MinSpareThreads 25
          MaxSpareThreads 75

          ServerLimit 250
          MaxRequestWorkers 250

          KeepAlive on
          MaxKeepAliveRequests 1000
          KeepAliveTimeout 5
        </IfModule>

* Change default text editor

    /usr/share/applications/defaults.list

* http://kpvz7ki2v5agwt35.onion/wiki/index.php/Main_Page

        Deep web pastebin GO GO!!

        How To:
        Download Tor + Browser (leaves no trace)
        https://www.torproject.org/projects/torbrowser.html.en

        Find links! Start out:
        http://en.wikipedia.org/wiki/.onion#Onion_Sites

        The Silk Road where u can buy drugs =o
        http://ianxz6zefk72ulzz.onion/index.php

        The Hidden Wiki! Can potentially find everything from here!
        http://kpvz7ki2v5agwt35.onion/wiki/index.php/Main_Page

        Contains Tor Library
        http://am4wuhz3zifexz5u.onion/

        Open Vendor Database (discusses non onion drug websites too!)
        http://g7pz322wcy6jnn4r.onion/opensource/ovdb/ac/index.php

        The General Store (more drugs)
        http://xqz3u5drneuzhaeo.onion/users/generalstore/

        A bunch of rather popular boards (like Intel Exchange and
        http://4eiruntyxxbgfv7o.onion/snapbbs/sitedex.php

        Most popular chan on tor (Arguably) comparable to 4chan
        http://b4yrk2nkydqfpzqm.onion/mobile/

        Directory/list of links
        http://dppmfxaacucguzpc.onion/

        Another chan
        http://c7jh7jzl3taek4eh.onion/

        pastebin
        http://4eiruntyxxbgfv7o.onion/paste/browse.php
        http://xqz3u5drneuzhaeo.onion/users/boi/?show=65

* backup folder

    tar -zcvf folder.tar.gz folder/
    mysqldump -u root -p[password] db > db.sql

* restore folder

    tar -zxvf folder.me.tar.gz
    mysql -u root -p[password] db < db.sql

* upload with ssh

    ssh username@remote_address cat < localfile ">" remote_file

* download with ssh

    ssh username@remote_address cat remote_file > local_file

* copy to multiple directory

    echo [directory-space-separated-or-can-also-use-wildcard] | xargs -n 1 cp -rf [file-name]

* manage startup

    sudo apt-get install sysv-rc-conf
    sudo sysv-rc-conf

* Openerp backend template: /usr/lib/python2.7/dist-packages/openerp/addons/web/views
* virtual box dkms error fix:

    sudo apt-get install linux-headers-`uname -r`

    Reconfigure dkms and load module:

    sudo dpkg-reconfigure virtualbox-dkms
    sudo modprobe vboxdrv

* Openerp configuration: /etc/odoo/openerp-server.conf
* Extract: tar -xzvf file.tar.gz
* Domain alias

    /etc/apache2/sites-enabled/001-something, ServerAlias

* Enable email

    /etc/mail/trusted-users and /etc/hostname to send mail
    add apache (www-data) to truseter-users, and add valid domain in front of localhost

* Update dst by src (faster than copy): rsync -r src/ dst
* tmux

    Ctrl+b " - split pane horizontally.
    Ctrl+b % - split pane vertically.
    Ctrl+b arrow key - switch pane.
    Hold Ctrl+b, don't release it and hold one of the arrow keys - resize pane.
    Ctrl+b x - close the current pane
    Ctrl+b c - (c)reate a new window.
    Ctrl+b n - move to the (n)ext window.
    Ctrl+b p - move to the (p)revious window.
    Ctrl+d close a window
    Ctrl+b :neww - Creating new window

* vim useful commands:

    :set mouse=a --> to use mouse in case of you are not used with vi
    :filetype plugin indent on --> allow auto-indent
    :set paste --> allow paste from clipboard
    :set tabstop=4
    :set shiftwidth=4
    :set expandtab --> automatically change tab into spaces
    :syntax on --> enable syntax highlighting
    :colorscheme [colorscheme] --> set colorscheme (molokai is a good one)
    :set t_Co=256 --> set terminal color to 256
    :set number --> to show the line number
    :[line-number] --> to go to the specific line
    /[keyword] --> search for keyword
    n --> forward
    N --> backward
    :%s/[keyword]/[search]/g
    v --> select
    y --> copy
    d --> cut
    p --> put
    u --> undo
    U --> big undo
    ctrl + r --> redo
    :edit [filename] --> open file in current tab
    :tabe [filename] --> open new tab
    :tabn --> go to next tab
    :tabp --> go to previous tab
    :tabn # --> go to tab #
    :vs [filename] --> vertical split
    :sp [filename] --> horizontal split
    ctrl + w + [arrow key] --> moving between splits
    :vimgrep /JFactory/ **/*.java --> look for JFactory in all java file recursively
    :cnext --> go to next file (after performing vimgrep)
    :cprevious --> go to previous file (after performing vimgrep)
    :cfirst --> go to first file (after performing vimgrep)
    :copen --> open file list (after performing vimgrep)
    :sav --> save as
    "_ --> blackhole register
    "+ --> clipboard register
    "_d --> delete without yank
    :set hlsearch <-- hilight search
    :nohl <-- not highlight search
    :set nolist wrap linebreak breakat&vim
    :CtrlPBugTag <-- go to symbol (if ctrlp plugin installed)
    use visual to select, press "S", enter tag you want to surround
    :NERDTreeTabsToggle
    zo, zc --> open/close one fold
    zR, zM --> open/close all
    ctrl+F --> scroll down
    ctrl+B --> scroll up
    q{register} do things q --> record macro
    @register --> run the macro
    ctrl+A --> increment
    :ls --> list all buffer
    :buffer 1 --> go to buffer 1
    :bw --> close current buffer

* vundle command

    :PluginList       - lists configured plugins
    :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    :PluginSearch foo - searches for foo; append `!` to refresh local cache
    :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    see :h vundle for more details or wiki for FAQ

* pandoc

    pandoc [src-file] -f [src-format] -t [dst-format] -s -o [dst-file]

* swap escape to caps lock

    * open dconf-editor
    * go to org | gnome | desktop | input-sources
    * change xkb-options into ['caps:swapescape']

* Find and replace in a project

    :set autowrite                  #automatically save the file when we change buffers
    :vimgrep /pattern/ ./**/files
    qa                              #start recording macro in register a
    :s/pattern/replace/g            #replace on the current line
    :cnext                          #go to next matching line
    q                               #stop recording
    10000@a                          #repeat the macro 10000 times, or until stopped by
                                    #an "error" such as reaching the end of the list
    :set noautowrite

* Start Gnome terminal in full screen

    gnome-terminal --maximize -e /home/gofrendi/.start-tmux.sh

* Build vim from scratch

    sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
        libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
        libcairo2-dev libx11-dev libxpm-dev libxt-dev python-dev \
        python3-dev ruby-dev lua5.1 lua5.1-dev git

    cd ~
    git clone https://github.com/vim/vim.git
    cd vim
    ./configure --with-features=huge \
                --enable-multibyte \
                --enable-rubyinterp \
                --enable-luainterp \
                --enable-perlinterp \
                --enable-tclinterp \
                --enable-cscope \
                --enable-pythoninterp \
                --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu \
                --enable-python3interp \
                --with-python3-config-dir=/usr/lib/python3.5/config-3.5m-x86_64-linux-gnu \
                --enable-perlinterp \
                --enable-gui=gtk2 --enable-cscope --prefix=/usr
    make VIMRUNTIMEDIR=/usr/share/vim/vim80
    sudo make install

* iwconfig

    sudo ifconfig wlan0 up

    Now scan for a list of WiFi networks in range. You might be typing your name wr$

    sudo iwlist wlan0 scan

    This will show you a list of wireless networks, pick yours from the list:

    sudo iwconfig wlan0 essid Wifi2Home key s:ABCDE12345

    To obtain the IP address, now request it with the Dynamic Host Client:

    sudo dhclient wlan0

    You should then be connected to the WiFi network. The first option is better, because it will be able to run as a cron job to start up the wifi whenever you need it going. If you need to turn off your WiFi for whatever reason, just type:

    sudo ifconfig wlan0 down

* swappiness

    vim /etc/sysctl.conf
    vm.swappiness = 10

* Install odoo

    wget -O - https://nightly.odoo.com/odoo.key | apt-key add -
    echo "deb http://nightly.odoo.com/9.0/nightly/deb/ ./" >> /etc/apt/sources.list
    sudo apt-get update && apt-get install odoo
    sudo apt-get install wkhtmltopdf

    Other way:

    sudo npm install -g less
    git clone git@github.com:odoo/odoo.git
    cd odoo
    sudo -H pip install -r requirements.txt
    ./odoo-bin

* Make mysql faster

    sudo mount -o remount,nobarrier /

* Run android emulator

    emulator -avd my-phone -qemu -m 512 -enable-kvm -cpu-delay 0

    with my-phone is the virtual device name and 512 is the memory

* Add android sdk to PATH (in .bashrc)

    export ANDROID_HOME=$HOME/Android/Sdk
    export PATH=$PATH:$ANDROID_HOME/tools
    export PATH=$PATH:$ANDROID_HOME/platform-tools

* Refresh path and all configuration in bashrc

    source .bashrc

* react-native

    adb reverse tcp:8081 tcp:8081
    rect-native run-android

* xiaomi

    enable developer mode - In your phone, go to Settings, About phone and click on MIUI version 7 times. You’ll see a pop up which says you are a developer now.
    Go back to Settings, Additional settings, Developer options and enable USB Debugging.
    Connect your phone to your PC/Mac and on the phone authorize your computer
    go back to Developer options, scroll down to find Turn on MIUI optimization and disable it. Your phone will be rebooted
    Try it now :)

* heroku

    sudo add-apt-repository "deb https://cli-assets.heroku.com/branches/stable/apt ./"
    curl -L https://cli-assets.heroku.com/apt/release.key | sudo apt-key add -
    sudo apt-get update
    sudo apt-get install heroku

* create symbolic link

    ln -s target_path link_path

* disable ctrl+c (that make vim hang)

    stty stop undef

* Install spacemacs
** Get emacs-snapshot

- sudo add-apt-repository ppa:ubuntu-elisp/ppa
- sudo apt-get update
- sudo apt-get install emacs-snapshot

** Install spacemacs

- git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d

** Switch to development branch

- cd ~/.emacs.d
- git checkout develop
- git pull origin develop

** Configure the spacemacs, I put "EDITED BY GOFRENDI" or "ADDED BY GOFRENDI" comments before the parts I changed

- [file:notes_res/spacemacs]

** Make a sh script contains this, and add it to startup, so that spacemacs will always greet me whenever computer started

- emacs-snapshot --daemon && emacs-snapshot --maximize

** Make PHP Autocomplete works

- Space Space php-extras-generate-eldoc

** Make Python Autocomplete works (hopefully)

- sudo pip install --upgrade jedi json-rpc service_factory

* From Vim to spacemacs, General Shortcut
** General
*** Space Space --> The only key you need to memorize
*** Ctrl g --> Exit/Cancel in case of something funny happened
*** :shell --> Running terminal, very useful
*** :neotree OR Space p t --> The same as :NERDTree
*** :vs --> Vertical split, just like in vim
*** :sp --> Horizontal split, just like in vim
*** ? --> On PHP function call will show parameters of function
*** tab --> Invoke autocompletion if any
*** Space f e R --> Reload ~/.spacemacs setting without restart
*** Space number --> Go to window #number
*** Space b p --> Go to previous buffer
*** Space b n --> Go to next buffer
*** Ctrl x b --> Show all buffer (helm)
*** Ctrl x k --> Kill buffer
*** Space Space rename-buffer --> rename buffer
*** Space browse-web --> browse
*** Space T n --> Theme cycling
*** Space f f --> Open file
*** Space h d s --> See current version
** Projectile
*** Ctrl c p f --> Search file in project
*** Space / --> Search symbol in project
*** Space p p --> Search project
*** Space p t --> neotree
** Eyebrow
*** Ctrl c Ctrl w Ctrl c --> Create new window configuration
*** Ctrl c Ctrl w number --> Go to window configuration #number
*** g t --> next window configuration
*** g T --> previous window configuration
** Org Mode
*** t --> Add TODO, and start TODO cycle
*** , h s --> Insert subtree heading
*** , h I --> Insert heading above
*** , h i --> Insert heading below
*** , s --> Add "scheduled"
*** , d --> Add "deadline"
*** , S h  --> Promote Subtree
*** , S l --> Demote Subtree
*** Ctrl c Ctrl x c --> Clone subtree by time (useful for making something repetitive such as teaching schedule)
*** Space a o o --> Agenda View
**** b --> On Agenda View, go back 1 week
**** f --> On Agenda View, go forward 1 week
** Git
*** Space g s
* Play with mongodb
** mongo
** use [yourdb]
** show dbs
** db.[collection].find([WHERE]).limit([NUMBER]).skip([NUMBER]).sort([SORT])
*** [WHERE] is an object with several keys including $and and $or
*** [SORT] is and object with {key:1} or {key:-1}
** db.[collection].insert([JSON-formatted data])
** db.[collection].update([WHERE], [JSON-formatted data])
** db.[collection].remove([WHERE])
** db.dropDatatabase()
** db.createCollection([name], [option])
** show collections
* Odoo
** Install Postgresql
** Clone Odoo from github
*** cd ~
*** git clone git@github.com:odoo/odoo.git
** Create Symlink
*** mkdir ~/odoo_addons/11.0/
*** ln -s ~/odo_addons/ ~/.local/share/Odoo/addons/
** Edit openerp-server.conf (if not clone from github), add addons_path
*** addons_path = /opt/openerp/addons,/opt/openerp/server/openerp/addons,/opt/openerp/web/addons,/opt/modules-openerp
** Run odoo
*** ~/odoo/odoo-bin
** Enable developer mode
*** Go to setting | Dashboard, look at the right hand side, there is a link to enable developer mode
** Bootstrap module
*** ~/odoo/odoo-bin scaffold openacademy ~/odoo_addons/11.0
** Reload app list
*** Go to Apps | Update App List
** https://www.odoo.com/documentation/10.0/howtos/backend.html
*** DONE work on inheritance and test
CLOSED: [2017-03-03 Fri 20:17]

